webpackHotUpdate("static\\development\\pages\\detail\\issues.js",{

/***/ "./pages/detail/issues.js":
/*!********************************!*\
  !*** ./pages/detail/issues.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var antd_lib_spin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/spin */ "./node_modules/antd/lib/spin/index.js");
/* harmony import */ var antd_lib_spin__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_spin__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_avatar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/avatar */ "./node_modules/antd/lib/avatar/index.js");
/* harmony import */ var antd_lib_avatar__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_avatar__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dynamic */ "./node_modules/next/dist/next-server/lib/dynamic.js");
/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _components_withDetail__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../components/withDetail */ "./components/withDetail.js");
/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/api */ "./lib/api.js");
/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_lib_api__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../lib/utils */ "./lib/utils.js");
/* harmony import */ var _components_SearchUser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../components/SearchUser */ "./components/SearchUser.js");








var __jsx = react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement;






var Option = antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a.Option;
var Markdown = next_dynamic__WEBPACK_IMPORTED_MODULE_8___default()(function () {
  return Promise.all(/*! import() */[__webpack_require__.e("styles"), __webpack_require__.e(1)]).then(__webpack_require__.bind(null, /*! ../../components/Markdown */ "./components/Markdown.js"));
}, {
  loading: function loading() {
    return __jsx("p", null, "Loading");
  },
  loadableGenerated: {
    webpack: function webpack() {
      return [/*require.resolve*/(/*! ../../components/Markdown */ "./components/Markdown.js")];
    },
    modules: ['../../components/Markdown']
  }
});
var CACHE = {};
var isServer = false;

function Label(_ref) {
  var label = _ref.label;
  return __jsx(react__WEBPACK_IMPORTED_MODULE_7___default.a.Fragment, null, __jsx("div", {
    style: {
      backgroundColor: "#".concat(label.color)
    },
    className: "jsx-1709400167" + " " + "label"
  }, label.name), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_6___default.a, {
    id: "1709400167"
  }, ".label.jsx-1709400167{display:inline-block;line-height:20px;margin-left:15px;padding:3px;border-radius:3px;font-size:14px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\\\Users\\\\marimo\\\\Desktop\\\\next-github\\\\pages\\\\detail\\\\issues.js */"));
}

function IssueDetail(_ref2) {
  var issue = _ref2.issue;
  return __jsx("div", {
    className: "jsx-1740130853" + " " + 'root'
  }, __jsx(Markdown, {
    content: issue.body
  }), __jsx("div", {
    className: "jsx-1740130853" + " " + 'actions'
  }, __jsx(antd_lib_button__WEBPACK_IMPORTED_MODULE_4___default.a, {
    href: issue.html_url,
    target: "_blank"
  }, "\u6253\u5F00issue\u8BA8\u8BBA\u9875\u9762")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_6___default.a, {
    id: "1740130853"
  }, ".root.jsx-1740130853{background:#fafafa;padding:20px;}.actions.jsx-1740130853{text-align:right;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\\\Users\\\\marimo\\\\Desktop\\\\next-github\\\\pages\\\\detail\\\\issues.js */"));
}

function IssueItem(_ref3) {
  var issue = _ref3.issue;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])(false),
      showDetail = _useState[0],
      setShowDetail = _useState[1]; // 这个写法就可以不依赖showDetail。这么写可以避开闭包


  var toggleShowDetail = Object(react__WEBPACK_IMPORTED_MODULE_7__["useCallback"])(function () {
    setShowDetail(function (detail) {
      return !detail;
    });
  }, []);
  return __jsx("div", {
    className: "jsx-1445670956"
  }, __jsx("div", {
    className: "jsx-1445670956" + " " + "issue"
  }, __jsx(antd_lib_button__WEBPACK_IMPORTED_MODULE_4___default.a, {
    type: "primary",
    size: "small",
    style: {
      position: 'absolute',
      top: 10,
      right: 10
    },
    onClick: toggleShowDetail
  }, showDetail ? '隐藏' : '查看')), __jsx("div", {
    className: "jsx-1445670956" + " " + "avatar"
  }, __jsx(antd_lib_avatar__WEBPACK_IMPORTED_MODULE_3___default.a, {
    src: issue.user.avatar_url,
    shape: "square",
    size: 50
  })), __jsx("div", {
    className: "jsx-1445670956" + " " + "main-info"
  }, __jsx("h6", {
    className: "jsx-1445670956"
  }, __jsx("span", {
    className: "jsx-1445670956"
  }, issue.title), issue.labels.map(function (label) {
    return __jsx(Label, {
      label: label,
      key: label.id
    });
  })), __jsx("p", {
    className: "jsx-1445670956" + " " + "sub-info"
  }, __jsx("span", {
    className: "jsx-1445670956"
  }, "Updated at ", Object(_lib_utils__WEBPACK_IMPORTED_MODULE_11__["getLastUpdated"])(issue.updated_at)))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_6___default.a, {
    id: "1445670956"
  }, ".issue.jsx-1445670956{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;padding:10px;}.issue.jsx-1445670956:hover{background:#fafafa;}.issue.jsx-1445670956+.issue.jsx-1445670956{border-top:1px solid #eee;}.main-info.jsx-1445670956>h6.jsx-1445670956{max-width:600px;font-size:16px;padding-right:40px;}.avatar.jsx-1445670956{margin-right:20px;}.sub-info.jsx-1445670956{margin-bottom:0;}.sub-info.jsx-1445670956>span.jsx-1445670956+span.jsx-1445670956{display:inline-block;margin-left:20px;font-size:12px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\\\Users\\\\marimo\\\\Desktop\\\\next-github\\\\pages\\\\detail\\\\issues.js */"), showDetail ? __jsx(IssueDetail, {
    issue: issue
  }) : null);
} // 获取请求参数


function makeQuery(creator, state, labels) {
  var creatorStr = creator ? "creator=".concat(creator) : '';
  var stateStr = state ? "state=".concat(state) : '';
  var labelStr = '';

  if (labels && labels.length) {
    labelStr = "labels=".concat(labels.join(','));
  }

  var arr = [];
  creatorStr && arr.push(creatorStr);
  stateStr && arr.push(stateStr);
  labelStr && arr.push(labelStr);
  return "?".concat(arr.join('&'));
}

var Issues = function Issues(_ref4) {
  var initialIssues = _ref4.initialIssues,
      labels = _ref4.labels,
      owner = _ref4.owner,
      name = _ref4.name;

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])(''),
      creator = _useState2[0],
      setCreator = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])('all'),
      state = _useState3[0],
      setState = _useState3[1];

  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])([]),
      label = _useState4[0],
      setLabel = _useState4[1];

  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])(initialIssues),
      issues = _useState5[0],
      setIssues = _useState5[1];

  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])(false),
      fetching = _useState6[0],
      setFetching = _useState6[1]; // 缓存label请求结果


  Object(react__WEBPACK_IMPORTED_MODULE_7__["useEffect"])(function () {
    !isServer && (CACHE["".concat(owner, "/").concat(name)] = labels);
  }, [owner, name, labels]); // 选中用户结果的回调

  var handleCreatorChange = Object(react__WEBPACK_IMPORTED_MODULE_7__["useCallback"])(function (value) {
    setCreator(value);
  }, []); // 选中状态结果的回调

  var handleStateChange = Object(react__WEBPACK_IMPORTED_MODULE_7__["useCallback"])(function (value) {
    setState(value);
  }, []); // 选中label结果的回调

  var handleLabelChange = Object(react__WEBPACK_IMPORTED_MODULE_7__["useCallback"])(function (value) {
    setLabel(value);
  }, []);
  var handleSearch = Object(react__WEBPACK_IMPORTED_MODULE_7__["useCallback"])(function () {
    setFetching(true);
    _lib_api__WEBPACK_IMPORTED_MODULE_10___default.a.request({
      url: "/repos/".concat(owner, "/").concat(name, "/issues").concat(makeQuery(creator, state, label))
    }).then(function (resp) {
      return setIssues(resp.data);
    })["catch"](function (err) {
      return console.error(err);
    })["finally"](function () {
      setFetching(false);
    });
  }, [owner, name, creator, state, label]);
  return __jsx("div", {
    className: "jsx-2212480553" + " " + 'root'
  }, __jsx("div", {
    className: "jsx-2212480553" + " " + 'search'
  }, __jsx(_components_SearchUser__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onChange: handleCreatorChange,
    value: creator
  }), __jsx(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
    placeholder: "\u72B6\u6001",
    onChange: handleStateChange,
    value: state,
    style: {
      width: 200,
      marginLeft: 20
    }
  }, __jsx(Option, {
    value: "all"
  }, "all"), __jsx(Option, {
    value: "open"
  }, "open"), __jsx(Option, {
    value: "closed"
  }, "closed")), __jsx(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
    mode: "multiple",
    placeholder: "Label",
    onChange: handleLabelChange,
    value: label,
    style: {
      flexGrow: 1,
      marginLeft: 20,
      marginRight: 20
    }
  }, labels ? labels.map(function (la) {
    return __jsx(Option, {
      value: la.name,
      key: la.id
    }, la.name);
  }) : ''), __jsx(antd_lib_button__WEBPACK_IMPORTED_MODULE_4___default.a, {
    type: "primary",
    onClick: handleSearch,
    disabled: fetching
  }, "\u641C\u7D22")), fetching ? __jsx("div", {
    className: "jsx-2212480553" + " " + "loading"
  }, __jsx(antd_lib_spin__WEBPACK_IMPORTED_MODULE_2___default.a, null)) : __jsx("div", {
    className: "jsx-2212480553" + " " + "issues"
  }, issues.map(function (issue) {
    return __jsx(IssueItem, {
      issue: issue,
      key: issue.id
    });
  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_6___default.a, {
    id: "2212480553"
  }, ".issues.jsx-2212480553{border:1px solid #eee;border-radius:5px;margin-bottom:20px;margin-top:20px;}.search.jsx-2212480553{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}.loading.jsx-2212480553{height:400px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\\\Users\\\\marimo\\\\Desktop\\\\next-github\\\\pages\\\\detail\\\\issues.js */"));
};

Issues.getInitialProps = function _callee(_ref5) {
  var ctx, _ctx$query, owner, name, full_name, fetchs, _fetchs, IssuesResp, LabelsResp;

  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ctx = _ref5.ctx;
          _ctx$query = ctx.query, owner = _ctx$query.owner, name = _ctx$query.name;
          full_name = "".concat(owner, "/").concat(name);
          _context.next = 5;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(Promise.all([_lib_api__WEBPACK_IMPORTED_MODULE_10___default.a.request({
            url: "/repos/".concat(owner, "/").concat(name, "/issues")
          }, ctx.req, ctx.res), CACHE[full_name] ? Promise.resolve({
            data: CACHE[full_name]
          }) : _lib_api__WEBPACK_IMPORTED_MODULE_10___default.a.request({
            url: "/repos/".concat(owner, "/").concat(name, "/labels")
          }, ctx.req, ctx.res)]));

        case 5:
          fetchs = _context.sent;
          _fetchs = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(fetchs, 2), IssuesResp = _fetchs[0], LabelsResp = _fetchs[1];
          return _context.abrupt("return", {
            owner: owner,
            name: name,
            initialIssues: IssuesResp.data,
            labels: LabelsResp.data
          });

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
};

/* harmony default export */ __webpack_exports__["default"] = (Object(_components_withDetail__WEBPACK_IMPORTED_MODULE_9__["default"])(Issues, 'issues'));

/***/ })

})
//# sourceMappingURL=issues.js.ddf7f288723ef2ced06e.hot-update.js.map