{"version":3,"file":"static/webpack/static\\development\\pages\\detail\\issues.js.b87cd66e8ba37c5277c0.hot-update.js","sources":["webpack:///./components/SearchUser.js"],"sourcesContent":["import {useEffect,useCallback,useState,useRef} from 'react'\r\nimport {Select,Spin} from 'antd'\r\nimport {debounce} from 'lodash'\r\nimport api from '../lib/api'\r\n\r\nconst Option=Select.Option\r\n\r\nfunction SearchUser({onChang,value}){\r\n  const [fetching,setFetching]=useState(false)\r\n  const [options, setOptions] = useState([])\r\n\r\n  // lastFetchIdRef作用是避免搜索结果请求过程中,又发起新的请求\r\n  // 这样导致用户可能会看到现象，即一个数组刚显示就被立马替换的过程\r\n  const lastFetchIdRef = useRef(0)\r\n\r\n  const handleSearch=useCallback(\r\n    debounce((value)=>{\r\n      lastFetchIdRef.current += 1\r\n      const fetchId = lastFetchIdRef.current\r\n      setFetching(true)\r\n      setOptions([])\r\n      if(!value) {\r\n        setFetching(false)\r\n        setOptions([])\r\n        return\r\n      }\r\n      api.request({\r\n        url:`/search/users?q=${value}`\r\n      }).then((resp)=>{\r\n          //由于闭包的存在，这里的fetachId保存的是这个请求时的lastFetchIdRef.current\r\n          //而lastFetchIdRef.current则一直指向最新的\r\n        if(fetchId !== lastFetchIdRef.current) {\r\n          return\r\n        }\r\n        const data=resp.data.data\r\n        data.items.map((item)=>{\r\n          return {\r\n            text:item.login,\r\n            value:item.login\r\n          }\r\n        })\r\n        setOptions(data.items)\r\n      }).finally(()=>{\r\n        setFetching(false)\r\n      })\r\n    },500),[]) \r\n\r\n    // 用户选中了搜索结果后\r\n  const handleChange = (value) => {\r\n    setOptions([])\r\n    setFetching(false)\r\n    onChange(value)\r\n  }\r\n  return <Select\r\n    value={value}\r\n    filterOption={false}\r\n    showSearch={true}\r\n    filterOption={false}\r\n    placeholder=\"创建者\"\r\n    notFoundContent={fetching ? <Spin size=\"small\" /> : <span>no user</span>}\r\n    style={{ width: '100%' }}\r\n    onSearch={handleSearch}\r\n    onChange={handleChange}\r\n  >\r\n    {\r\n      options.map((item)=>{\r\n        return <Option value={item.value} key={item.key}>{item.text}</Option>\r\n      })\r\n    }\r\n  </Select>\r\n}\r\n\r\nexport default SearchUser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AACA;AADA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;;;;A","sourceRoot":""}