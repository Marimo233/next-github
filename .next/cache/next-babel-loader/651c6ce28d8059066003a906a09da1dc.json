{"ast":null,"code":"import _Spin from \"antd/lib/spin\";\nimport _Select from \"antd/lib/select\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useCallback, useState, useRef } from 'react';\nimport { debounce } from 'lodash';\nimport api from '../lib/api';\nconst Option = _Select.Option;\n\nfunction SearchUser({\n  onChange,\n  value\n}) {\n  const {\n    0: fetching,\n    1: setFetching\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]); // lastFetchIdRef作用是避免搜索结果请求过程中,又发起新的请求\n  // 这样导致用户可能会看到现象，即一个数组刚显示就被立马替换的过程\n\n  const lastFetchIdRef = useRef(0);\n  const handleSearch = useCallback(debounce(value => {\n    lastFetchIdRef.current += 1;\n    const fetchId = lastFetchIdRef.current;\n    setFetching(true);\n    setOptions([]);\n\n    if (!value) {\n      setFetching(false);\n      setOptions([]);\n      return;\n    }\n\n    api.request({\n      url: `/search/users?q=${value}`\n    }).then(resp => {\n      //由于闭包的存在，这里的fetachId保存的是这个请求时的lastFetchIdRef.current\n      //而lastFetchIdRef.current则一直指向最新的\n      if (fetchId !== lastFetchIdRef.current) {\n        return;\n      }\n\n      const data = resp.data.data;\n      data.items = data.items.map(item => {\n        return {\n          text: item.login,\n          value: item.login\n        };\n      });\n      setOptions(data.items);\n    }).finally(() => {\n      setFetching(false);\n    });\n  }, 500), []); // 用户选中了搜索结果后\n\n  const handleChange = value => {\n    setOptions([]);\n    setFetching(false);\n    onChange(value);\n  };\n\n  return __jsx(_Select, {\n    value: value,\n    filterOption: false,\n    showSearch: true,\n    filterOption: false,\n    placeholder: \"\\u521B\\u5EFA\\u8005\",\n    notFoundContent: fetching ? __jsx(_Spin, {\n      size: \"small\"\n    }) : __jsx(\"span\", null, \"no user\"),\n    style: {\n      width: '100%'\n    },\n    onSearch: handleSearch,\n    onChange: handleChange\n  }, options.map(item => {\n    return __jsx(Option, {\n      value: item.value,\n      key: item.key\n    }, item.text);\n  }));\n}\n\nexport default SearchUser;","map":{"version":3,"sources":["C:/Users/marimo/Desktop/next-github/components/SearchUser.js"],"names":["useEffect","useCallback","useState","useRef","debounce","api","Option","SearchUser","onChange","value","fetching","setFetching","options","setOptions","lastFetchIdRef","handleSearch","current","fetchId","request","url","then","resp","data","items","map","item","text","login","finally","handleChange","width","key"],"mappings":"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","sourcesContent":["import {useEffect,useCallback,useState,useRef} from 'react'\r\nimport {Select,Spin} from 'antd'\r\nimport {debounce} from 'lodash'\r\nimport api from '../lib/api'\r\n\r\nconst Option=Select.Option\r\n\r\nfunction SearchUser({onChange,value}){\r\n  const [fetching,setFetching]=useState(false)\r\n  const [options, setOptions] = useState([])\r\n\r\n  // lastFetchIdRef作用是避免搜索结果请求过程中,又发起新的请求\r\n  // 这样导致用户可能会看到现象，即一个数组刚显示就被立马替换的过程\r\n  const lastFetchIdRef = useRef(0)\r\n\r\n  const handleSearch=useCallback(\r\n    debounce((value)=>{\r\n      lastFetchIdRef.current += 1\r\n      const fetchId = lastFetchIdRef.current\r\n      setFetching(true)\r\n      setOptions([])\r\n      if(!value) {\r\n        setFetching(false)\r\n        setOptions([])\r\n        return\r\n      }\r\n      api.request({\r\n        url:`/search/users?q=${value}`\r\n      }).then((resp)=>{\r\n          //由于闭包的存在，这里的fetachId保存的是这个请求时的lastFetchIdRef.current\r\n          //而lastFetchIdRef.current则一直指向最新的\r\n        if(fetchId !== lastFetchIdRef.current) {\r\n          return\r\n        }\r\n        const data=resp.data.data\r\n        data.items=data.items.map((item)=>{\r\n          return {\r\n            text:item.login,\r\n            value:item.login\r\n          }\r\n        })\r\n        setOptions(data.items)\r\n      }).finally(()=>{\r\n        setFetching(false)\r\n      })\r\n    },500),[]) \r\n\r\n    // 用户选中了搜索结果后\r\n  const handleChange = (value) => {\r\n    setOptions([])\r\n    setFetching(false)\r\n    onChange(value)\r\n  }\r\n  return <Select\r\n    value={value}\r\n    filterOption={false}\r\n    showSearch={true}\r\n    filterOption={false}\r\n    placeholder=\"创建者\"\r\n    notFoundContent={fetching ? <Spin size=\"small\" /> : <span>no user</span>}\r\n    style={{ width: '100%' }}\r\n    onSearch={handleSearch}\r\n    onChange={handleChange}\r\n  >\r\n    {\r\n      options.map((item)=>{\r\n        return <Option value={item.value} key={item.key}>{item.text}</Option>\r\n      })\r\n    }\r\n  </Select>\r\n}\r\n\r\nexport default SearchUser"]},"metadata":{},"sourceType":"module"}