{"ast":null,"code":"import _Select from \"antd/lib/select\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useCallback, useState, useRef } from 'react';\nimport { debounce } from 'lodash';\nimport api from '../lib/api';\nconst Option = _Select.Option;\n\nfunction SearchUser({\n  onChang,\n  value\n}) {\n  const {\n    0: fetching,\n    1: setFetching\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState([]); // lastFetchIdRef作用是避免搜索结果请求过程中,又发起新的请求\n  // 这样导致用户可能会看到现象，即一个数组刚显示就被立马替换的过程\n\n  const lastFetchIdRef = useRef(0);\n  const handleSearch = useCallback(debounce(value => {\n    lastFetchIdRef.current += 1;\n    const fetchId = lastFetchIdRef.current;\n    setFetching(true);\n    setData([]);\n\n    if (!value) {\n      setFetching(false);\n      setOptions([]);\n      return;\n    }\n\n    api.request({\n      url: `/search/users?q=${value}`\n    }).then(resp => {\n      //由于闭包的存在，这里的fetachId保存的是这个请求时的lastFetchIdRef.current\n      //而lastFetchIdRef.current则一直指向最新的\n      if (fetchId !== lastFetchIdRef.current) {\n        return;\n      }\n\n      const data = resp.data.data;\n      data.map(item => {\n        return {\n          text: item.login,\n          value: item.login\n        };\n      });\n    }).finally(() => {\n      setFetching(false);\n    });\n  }, 500), []); // 用户选中了搜索结果后\n\n  const handleChange = value => {\n    setOptions([]);\n    setFetching(false);\n    onChange(value);\n  };\n\n  return __jsx(_Select, {\n    value: value,\n    filterOption: false,\n    notFoundContent: fetching ? __jsx(Spin, {\n      size: \"small\"\n    }) : __jsx(\"span\", null, \"no user\"),\n    style: {\n      width: '100%'\n    },\n    onSearch: handleSearch,\n    onChange: handleChange\n  }, data.map(item => {\n    return __jsx(Option, {\n      value: item.value,\n      key: item.key\n    }, item.text);\n  }));\n}\n\nexport default SearchUser;","map":{"version":3,"sources":["C:/Users/marimo/Desktop/next-github/components/SearchUser.js"],"names":["useEffect","useCallback","useState","useRef","debounce","api","Option","SearchUser","onChang","value","fetching","setFetching","data","setData","lastFetchIdRef","handleSearch","current","fetchId","setOptions","request","url","then","resp","map","item","text","login","finally","handleChange","onChange","width","key"],"mappings":";;;AAAA,SAAQA,SAAR,EAAkBC,WAAlB,EAA8BC,QAA9B,EAAuCC,MAAvC,QAAoD,OAApD;AAEA,SAAQC,QAAR,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,MAAMC,MAAM,GAAC,QAAOA,MAApB;;AAEA,SAASC,UAAT,CAAoB;AAACC,EAAAA,OAAD;AAASC,EAAAA;AAAT,CAApB,EAAoC;AAClC,QAAM;AAAA,OAACC,QAAD;AAAA,OAAUC;AAAV,MAAuBT,QAAQ,CAAC,KAAD,CAArC;AACA,QAAM;AAAA,OAACU,IAAD;AAAA,OAAMC;AAAN,MAAeX,QAAQ,CAAC,EAAD,CAA7B,CAFkC,CAIlC;AACA;;AACA,QAAMY,cAAc,GAAGX,MAAM,CAAC,CAAD,CAA7B;AAEA,QAAMY,YAAY,GAACd,WAAW,CAC5BG,QAAQ,CAAEK,KAAD,IAAS;AAChBK,IAAAA,cAAc,CAACE,OAAf,IAA0B,CAA1B;AACA,UAAMC,OAAO,GAAGH,cAAc,CAACE,OAA/B;AACAL,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;;AACA,QAAG,CAACJ,KAAJ,EAAW;AACTE,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAO,MAAAA,UAAU,CAAC,EAAD,CAAV;AACA;AACD;;AACDb,IAAAA,GAAG,CAACc,OAAJ,CAAY;AACVC,MAAAA,GAAG,EAAE,mBAAkBX,KAAM;AADnB,KAAZ,EAEGY,IAFH,CAESC,IAAD,IAAQ;AACZ;AACA;AACF,UAAGL,OAAO,KAAKH,cAAc,CAACE,OAA9B,EAAuC;AACrC;AACD;;AACD,YAAMJ,IAAI,GAACU,IAAI,CAACV,IAAL,CAAUA,IAArB;AACAA,MAAAA,IAAI,CAACW,GAAL,CAAUC,IAAD,IAAQ;AACf,eAAO;AACLC,UAAAA,IAAI,EAACD,IAAI,CAACE,KADL;AAELjB,UAAAA,KAAK,EAACe,IAAI,CAACE;AAFN,SAAP;AAID,OALD;AAMD,KAfD,EAeGC,OAfH,CAeW,MAAI;AACbhB,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAjBD;AAkBD,GA5BO,EA4BN,GA5BM,CADoB,EA6BrB,EA7BqB,CAA9B,CARkC,CAuChC;;AACF,QAAMiB,YAAY,GAAInB,KAAD,IAAW;AAC9BS,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAP,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAkB,IAAAA,QAAQ,CAACpB,KAAD,CAAR;AACD,GAJD;;AAKA,SAAO;AACL,IAAA,KAAK,EAAEA,KADF;AAEL,IAAA,YAAY,EAAE,KAFT;AAGL,IAAA,eAAe,EAAEC,QAAQ,GAAG,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC;AAAX,MAAH,GAA2B,8BAH/C;AAIL,IAAA,KAAK,EAAE;AAAEoB,MAAAA,KAAK,EAAE;AAAT,KAJF;AAKL,IAAA,QAAQ,EAAEf,YALL;AAML,IAAA,QAAQ,EAAEa;AANL,KASHhB,IAAI,CAACW,GAAL,CAAUC,IAAD,IAAQ;AACf,WAAO,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAEA,IAAI,CAACf,KAApB;AAA2B,MAAA,GAAG,EAAEe,IAAI,CAACO;AAArC,OAA2CP,IAAI,CAACC,IAAhD,CAAP;AACD,GAFD,CATG,CAAP;AAcD;;AAED,eAAelB,UAAf","sourcesContent":["import {useEffect,useCallback,useState,useRef} from 'react'\r\nimport {Select} from 'antd'\r\nimport {debounce} from 'lodash'\r\nimport api from '../lib/api'\r\n\r\nconst Option=Select.Option\r\n\r\nfunction SearchUser({onChang,value}){\r\n  const [fetching,setFetching]=useState(false)\r\n  const [data,setData]=useState([])\r\n\r\n  // lastFetchIdRef作用是避免搜索结果请求过程中,又发起新的请求\r\n  // 这样导致用户可能会看到现象，即一个数组刚显示就被立马替换的过程\r\n  const lastFetchIdRef = useRef(0)\r\n\r\n  const handleSearch=useCallback(\r\n    debounce((value)=>{\r\n      lastFetchIdRef.current += 1\r\n      const fetchId = lastFetchIdRef.current\r\n      setFetching(true)\r\n      setData([])\r\n      if(!value) {\r\n        setFetching(false)\r\n        setOptions([])\r\n        return\r\n      }\r\n      api.request({\r\n        url:`/search/users?q=${value}`\r\n      }).then((resp)=>{\r\n          //由于闭包的存在，这里的fetachId保存的是这个请求时的lastFetchIdRef.current\r\n          //而lastFetchIdRef.current则一直指向最新的\r\n        if(fetchId !== lastFetchIdRef.current) {\r\n          return\r\n        }\r\n        const data=resp.data.data\r\n        data.map((item)=>{\r\n          return {\r\n            text:item.login,\r\n            value:item.login\r\n          }\r\n        })\r\n      }).finally(()=>{\r\n        setFetching(false)\r\n      })\r\n    },500),[]) \r\n\r\n    // 用户选中了搜索结果后\r\n  const handleChange = (value) => {\r\n    setOptions([])\r\n    setFetching(false)\r\n    onChange(value)\r\n  }\r\n  return <Select\r\n    value={value}\r\n    filterOption={false}\r\n    notFoundContent={fetching ? <Spin size=\"small\" /> : <span>no user</span>}\r\n    style={{ width: '100%' }}\r\n    onSearch={handleSearch}\r\n    onChange={handleChange}\r\n  >\r\n    {\r\n      data.map((item)=>{\r\n        return <Option value={item.value} key={item.key}>{item.text}</Option>\r\n      })\r\n    }\r\n  </Select>\r\n}\r\n\r\nexport default SearchUser"]},"metadata":{},"sourceType":"module"}